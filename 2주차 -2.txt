1. C++에서 이름 충돌은 프로그램에서 심각한 오류를 일으키므로, 이름 충돌을 방지하는 기능은 매우 중요합니다. namespace는 변수나 함수의 이름 충돌을 방지하고, class는 멤버 변수나 멤버 함수의 이름 충돌을 방지하는 데 사용됩니다.

2. 교수님께서 말씀하신 것처럼, 함수 선언을 헤더 파일에 작성하고 함수 정의를 소스 파일에 작성하는 방법이 일반적으로 더 효율적입니다. 이유는 다음과 같습니다.

모듈화 (Modula
함수 선언과 정의를 각각의 파일로 나누면 코드를 모듈화할 수 있습니다. 즉, 각각의 파일은 서로 독립적인 모듈이 되어 프로그램의 구성 요소로 사용할 수 있습니다. 이를 통해 코드 유지 보수가 용이해지고, 코드의 재사용성도 높아집니다.

컴파일 속도 (Compilation Speed)
함수 선언을 헤더 파일에 작성하면, 다른 소스 파일에서 해당 함수를 사용할 때마다 함수 선언을 다시 작성할 필요가 없습니다. 따라서 컴파일러는 함수를 찾기 위해 전체 소스 코드를 다시 검색할 필요가 없어지므로, 컴파일 속도가 향상됩니다.

오류 방지 (Error Prevention)
함수 선언과 정의를 분리하면, 함수를 잘못 사용하는 오류를 방지할 수 있습니다. 예를 들어, 함수의 반환형이나 매개변수의 개수나 타입 등이 다른 경우에는 컴파일러에서 에러 메시지를 출력해주기 때문입니다. 따라서 함수를 사용할 때 발생하는 오류를 미리 방지할 수 있습니다.

3. // sub.h 파일
namespace mynamespace {
    double area(int r);
}

// sub.cpp 파일
#include "sub.h"
namespace mynamespace {
    double area(int r) {
        return 3.14 * r * r;
    }
}

// main.cpp 파일
#include "sub.h"
#include <iostream>
using namespace mynamespace;
int main() {
    std::cout << "원의 면적은 " << area(3);
    return 0;
}

namespace를 이용하여 헤더파일과 main함수안의 함수명이 같음에도 불구하고 성공적으로 실행됨. (함수 오버로딩, 함수중복)

